from telebot import types
import telebot
import json
from datetime import datetime
import random
from git import Repo
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7723929403:AAFkBRy-Dbogt74fZgnIvquI4mLvjg-XFTQ'
bot = telebot.TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
try:
    with open("users.json", "r", encoding="utf-8") as f:
        users = json.load(f)
except (FileNotFoundError, json.decoder.JSONDecodeError):
    users = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users():
    with open("users.json", "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
def get_random_prediction():
    try:
        with open('predictions.txt', 'r', encoding='utf-8') as file:
            predictions = file.read().strip().split('\n\n')
            if predictions:
                return random.choice(predictions)
            return None
    except Exception as e:
        print(f"Error reading predictions: {e}")
        return None


# –ö–Ω–æ–ø–∫–∏: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    btn2 = telebot.types.KeyboardButton("üìà –í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª")
    markup.add(btn1, btn2)
    return markup


# –ö–Ω–æ–ø–∫–∏: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def registration_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    btn2 = telebot.types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(btn1, btn2)
    return markup


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
"""
*üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RICHES MINES!*

*üí£ Mines* ‚Äî –∞–∑–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ *1win*, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º ¬´–°–∞–ø—ë—Ä–µ¬ª.

*üéØ –¶–µ–ª—å*: –û—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏, –∏–∑–±–µ–≥–∞—è –º–∏–Ω.

*ü§ñ –ù–∞—à –±–æ—Ç* –∏—Å–ø–æ–ª—å–∑—É–µ—Ç *–Ω–µ–π—Ä–æ—Å–µ—Ç—å ChatGPT-4* –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–∏–Ω —Å *—Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 95%*.

*‚ùóÔ∏è –í–∞–∂–Ω–æ*: –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç *—Ç–æ–ª—å–∫–æ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ 1win*, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª *¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª* –≤ —ç—Ç–æ–º –±–æ—Ç–µ.
""",
        parse_mode='Markdown',
        reply_markup=main_menu()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
@bot.message_handler(func=lambda message: message.text == "üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
def start_registration(message):
    try:
        with open('mines.png', 'rb') as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption="""
üîπ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ 1win*

1Ô∏è‚É£* –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: üëâ* [1win](https://1wrjmw.com/casino/list?open=register&p=16cq)
üîπ* –ü—Ä–æ–º–æ–∫–æ–¥:* `RICHESMINES` (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)

2Ô∏è‚É£* –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID*:
üìå –í–æ –≤–∫–ª–∞–¥–∫–µ *"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"* ‚Üí ID –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.

3Ô∏è‚É£ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –±–æ—Ç—É* –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

üöÄ*–ì–æ—Ç–æ–≤–æ!* –û–∂–∏–¥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.

‚ùó*–õ—é–±–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±–º–∞–Ω—É—Ç—å –±–æ—Ç–∞ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∞.* 
‚ö†Ô∏è*–ù–∞—Ä—É—à–∏—Ç–µ–ª–∏ –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞!*
""",
                parse_mode='Markdown',
            )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
            parse_mode='Markdown'
        )
        print(f"Error in registration: {e}")


# –°–æ—Ö—Ä–∞–Ω—è–µ–º ID, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
@bot.message_handler(func=lambda message: message.text.isdigit())
def save_onewin_id(message):
    user_id = str(message.chat.id)
    if user_id not in users:
        users[user_id] = {
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            "telegram_id": message.from_user.id,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "username": message.from_user.username,
            "language_code": message.from_user.language_code,

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö
            "predictions_left": 10,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            "full_access": False,  # –§–ª–∞–≥ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            "registration_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "last_activity": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "1win_id": None
        }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π ID
    if '1win_id' not in users[user_id] or not users[user_id]['1win_id']:
        users[user_id]['1win_id'] = message.text
        users[user_id]['last_activity'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        save_users()
        bot.send_message(
            message.chat.id,
            "‚úÖ –¢–≤–æ–π ID —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã.",
            reply_markup=main_menu()
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚úÖ –£ —Ç–µ–±—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ID.",
            reply_markup=main_menu()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª"
@bot.message_handler(func=lambda message: message.text == "üìà –í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª")
def handle_signal(message):
    user_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if user_id not in users:
        bot.send_message(
            message.chat.id,
            """
‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.

üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
""",
            parse_mode='Markdown',
            reply_markup=registration_menu()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1win ID
    if '1win_id' not in users[user_id] or not users[user_id]['1win_id']:
        bot.send_message(
            message.chat.id,
            """
‚ùó –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.

üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π ID –æ—Ç 1win —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
""",
            parse_mode='Markdown',
            reply_markup=registration_menu()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    if not users[user_id]['full_access'] and users[user_id]['predictions_left'] <= 0:
        bot.send_message(
            message.chat.id,
            """
‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã!

üë• –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ [–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É](https://t.me/korbetov?text=–ü—Ä–∏–≤–µ—Ç!üëã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø?) —Å–æ–æ–±—â–µ–Ω–∏–µ.
""",
            parse_mode='Markdown',
            disable_web_page_preview = True
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    prediction = get_random_prediction()
    if not prediction:
        bot.send_message(
            message.chat.id,
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.",
            parse_mode='Markdown'
        )
        return

    try:
        if not users[user_id]['full_access']:
            users[user_id]['predictions_left'] -= 1
            predictions_left = users[user_id]['predictions_left']
            save_users()

            bot.send_message(
                message.chat.id,
                f"""
üéØ *–í–∞—à —Å–∏–≥–Ω–∞–ª:*

{prediction}

*‚ùóÔ∏è–í—ã—Å—Ç–∞–≤—å—Ç–µ 3 –ª–æ–≤—É—à–∫–∏. –≠—Ç–æ –≤–∞–∂–Ω–æ!*
*‚ùóÔ∏è–ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ —É–¥–≤–æ–π —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç—å –ø–æ—Ç–µ—Ä—é.*
""",
                parse_mode='Markdown'
            )
        else:
            # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
            bot.send_message(
                message.chat.id,
                f"""
üéØ *–í–∞—à —Å–∏–≥–Ω–∞–ª:*

{prediction}
""",
                parse_mode='Markdown'
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        users[user_id]['last_activity'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        save_users()

    except Exception as e:
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='Markdown'
        )
        print(f"Error sending prediction: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def go_to_main_menu(message):
    bot.send_message(
        message.chat.id,
        "üè† –¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
@bot.message_handler(commands=['giveaccess'])
def give_access(message):
    if message.from_user.id != 702647989:
        bot.reply_to(message, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text.split()
    if len(args) != 2:
        bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /giveaccess ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    target_id = args[1]

    if target_id in users:
        users[target_id]['full_access'] = True
        save_users()
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –ø–æ–ª—É—á–∏–ª –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
    else:
        bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(commands=['broadcast'])
def start_broadcast(message):
    if message.from_user.id != 702647989:
        bot.send_message(message.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìù –¢–µ–∫—Å—Ç", "üñºÔ∏è –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(msg, choose_broadcast_type)

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
def choose_broadcast_type(message):
    if message.text == "üìù –¢–µ–∫—Å—Ç":
        msg = bot.send_message(message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, broadcast_text)
    elif message.text == "üñºÔ∏è –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç":
        msg = bot.send_message(message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, broadcast_photo)
    else:
        bot.send_message(message.chat.id, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ /broadcast", reply_markup=types.ReplyKeyboardRemove())

# –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
def broadcast_text(message):
    text = message.text
    for user_id in users:
        try:
            bot.send_message(user_id, text)
        except Exception as e:
            print(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}: {e}")
    bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç
def broadcast_photo(message):
    if not message.photo:
        bot.send_message(message.chat.id, "‚õî –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return

    file_id = message.photo[-1].file_id
    msg = bot.send_message(message.chat.id, "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ:")
    bot.register_next_step_handler(msg, lambda m: send_photo_broadcast(m, file_id))

def send_photo_broadcast(message, file_id):
    caption = message.text
    for user_id in users:
        try:
            bot.send_photo(user_id, photo=file_id, caption=caption)
        except Exception as e:
            print(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}: {e}")
    bot.send_message(message.chat.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@bot.message_handler(commands=['github'])
def handle_github_backup(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
    if message.from_user.id != 702647989:
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")
        return

    try:
        # 1. –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é (–Ω–∞ Railway —ç—Ç–æ /app)
        repo_path = "/app"
        repo = Repo(repo_path)

        # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        repo.git.add("users.json")

        # 3. –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        repo.git.commit("-m", "Backup users.json")

        # 4. –ü—É—à–∏–º —Å —Ç–æ–∫–µ–Ω–æ–º (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        token = os.getenv("GITHUB_TOKEN")
        origin = repo.remote(name="origin")
        origin.set_url(f"https://{token}@github.com/–≤–∞—à-–ª–æ–≥–∏–Ω/–≤–∞—à-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.git")
        origin.push()

        bot.reply_to(message, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ GitHub!")

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        print(error_msg)  # –î–ª—è –ª–æ–≥–æ–≤
        bot.reply_to(message, error_msg)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)